// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/eminetto/go-with-frameworks/ent/course"
	"github.com/eminetto/go-with-frameworks/ent/lesson"
	"github.com/google/uuid"
)

// Lesson is the model entity for the Lesson schema.
type Lesson struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LessonQuery when eager-loading is set.
	Edges          LessonEdges `json:"edges"`
	course_lessons *uuid.UUID
}

// LessonEdges holds the relations/edges for other nodes in the graph.
type LessonEdges struct {
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LessonEdges) CourseOrErr() (*Course, error) {
	if e.loadedTypes[0] {
		if e.Course == nil {
			// The edge course was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: course.Label}
		}
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lesson) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lesson.FieldName:
			values[i] = new(sql.NullString)
		case lesson.FieldID:
			values[i] = new(uuid.UUID)
		case lesson.ForeignKeys[0]: // course_lessons
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Lesson", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lesson fields.
func (l *Lesson) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lesson.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				l.ID = *value
			}
		case lesson.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = value.String
			}
		case lesson.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field course_lessons", values[i])
			} else if value.Valid {
				l.course_lessons = new(uuid.UUID)
				*l.course_lessons = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryCourse queries the "course" edge of the Lesson entity.
func (l *Lesson) QueryCourse() *CourseQuery {
	return (&LessonClient{config: l.config}).QueryCourse(l)
}

// Update returns a builder for updating this Lesson.
// Note that you need to call Lesson.Unwrap() before calling this method if this Lesson
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lesson) Update() *LessonUpdateOne {
	return (&LessonClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Lesson entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lesson) Unwrap() *Lesson {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lesson is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lesson) String() string {
	var builder strings.Builder
	builder.WriteString("Lesson(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", name=")
	builder.WriteString(l.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Lessons is a parsable slice of Lesson.
type Lessons []*Lesson

func (l Lessons) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
